// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 2>;
            then-layer = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp GRAVE>;
            key-positions = <1 0>;
        };

        open_square {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 7>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <18 19>;
        };

        close_square {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            display-name = "DEFAULT";
            bindings = <
&ht LEFT_WIN Q    &kp W  &kp E  &kp R            &kp T          &kp Y      &kp U               &kp I      &kp O    &ht RIGHT_GUI P
&ht LCTRL A       &kp S  &kp D  &kp F            &kp G          &kp H      &kp J               &kp K      &kp L    &ht RIGHT_CONTROL SEMICOLON
&ht LEFT_SHIFT Z  &kp X  &kp C  &kp V            &kp B          &kp N      &kp M               &kp COMMA  &kp DOT  &ht RIGHT_SHIFT SLASH
                                &lt 1 BACKSPACE  &lt 2 SPACE    &lt 3 TAB  &ht LEFT_ALT ENTER
            >;
        };

        Num_nav {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6    &kp N7          &kp N8        &kp N9     &kp N0
&trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans
                        &trans  &trans    &mo 4     &trans
            >;
        };

        Mouse {
            display-name = "Mouse";
            bindings = <
&trans  &trans    &trans    &trans    &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
&trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans    &trans    &trans          &trans          &trans        &trans           &trans
                            &trans    &trans    &mo 4           &trans
            >;
        };

        Symbol {
            bindings = <
&kp GRAVE      &kp LESS_THAN  &kp EQUAL  &kp GREATER_THAN  &kp HASH      &kp CARET    &kp LEFT_BRACKET  &kp UNDER      &kp RBKT         &kp BSLH
&kp BACKSLASH  &kp LS(N9)     &kp MINUS  &kp LS(N0)        &kp PLUS      &kp PERCENT  &kp LEFT_BRACE    &kp SEMI       &kp RIGHT_BRACE  &kp APOS
&trans         &kp ASTRK      &kp COLON  &kp FSLH          &kp DOLLAR    &kp AT       &kp PIPE          &kp LS(GRAVE)  &kp AMPERSAND    &trans
                                         &trans            &mo 4         &trans       &trans
            >;
        };

        Func {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bootloader        &bt BT_CLR  &kp C_BRIGHTNESS_DEC  &kp PRINTSCREEN   &kp C_BRIGHTNESS_INC  &tog 5
&kp F5  &kp F6   &kp F7   &kp F8   &trans             &trans      &kp C_VOLUME_DOWN     &kp C_MUTE        &kp C_VOLUME_UP       &trans
&kp F9  &kp F10  &kp F11  &kp F12  &default_report    &trans      &kp C_PREV            &kp C_PLAY_PAUSE  &kp C_NEXT            &trans
                          &trans   &trans             &trans      &trans
            >;
        };

        Game {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E         &kp R          &kp T   &kp Y   &kp U  &kp I   &kp O
&kp LSHFT  &kp A  &kp S  &kp D         &kp F          &kp G   &kp H   &kp J  &kp K   &ht RIGHT_SHIFT L
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V          &kp B   &kp N   &kp M  &trans  &ht RCTRL P
                         &kp LEFT_ALT  &lt 2 SPACE    &tog 5  &trans
            >;
        };
    };
};
